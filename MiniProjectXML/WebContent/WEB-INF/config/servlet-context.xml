<?xml version="1.0" encoding="UTF-8"?>

<!-- beans의 beans. 서블릿컨테이너 자체에 대한 환경설정 -->


<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc
                    http://www.springframework.org/schema/mvc/spring-mvc.xsd
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans.xsd
                    http://www.springframework.org/schema/context
                    http://www.springframework.org/schema/context/spring-context.xsd
                    ">

	<!-- Autowired 걸어놓은 인터셉터 등록. 어떤 요청이 들어오든 인터셉터를 적용시키겠다 -->
	<interceptors>
		<interceptor>
			<mapping path="/**" />
			<beans:bean
				class='kr.co.softsoldesk.interceptor.TopMenuInterceptor' />
		</interceptor>
	</interceptors>
	
	
	<!-- 인터셉터 2개 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/**"/>
			<beans:bean class='kr.co.softsoldesk.interceptor.TopMenuInterceptor'/>
		</interceptor>
		
		
		<interceptor>
			<mapping path="/user/modify_user"/>
			<mapping path="/user/logout"/>
			<mapping path="/board/*"/>
			<exclude-mapping path="/board/main"/>
			<beans:bean class='kr.co.softsoldesk.interceptor.CheckLoginInterceptor'/>
		</interceptor>
	</interceptors>
	



	<!-- 요청과 관련된 처리. url관련된 컨트롤러/어노테이션/뷰리졸버/인터셉터/멀티파트리졸버 등의 설정 -->

	<!-- 어노테이션을 가지고있는 컨트롤러를 로딩할 수 있게한다. -->
	<annotation-driven />
	<!-- 즉, 21, 23을 이용해서 컨트롤러임을 어노테이션으로 간편하게 인식시키는 방식. -->
	<context:component-scan
		base-package="kr.co.softsoldesk.controller" />

	<context:component-scan
		base-package="kr.co.softsoldesk.dao" />


	<context:component-scan
		base-package="kr.co.softsoldesk.service" />


	<!-- 디스파쳐에게 뷰에 대한 정보를 전달할때, String타입의 view 이름과 view 오브젝트를 매핑해주는 역할 : InternalResourceViewResolver -->
	<!-- 컨트롤러 메서드(home()메서드)에서 반환하는 모든 문자열의 앞(prefix, 경로),뒤(suffix, 확장자)에 붙을 
		경로 설정. 만약 컨트롤러가 “kbh"라는 문자열로 된 뷰 이름을 리턴하면, 뷰 리졸버는 "/WEB-INF/views/kbh.jsp"라는 
		위치의 JSP 뷰를 참고해서 모델을 이용하여 페이지를 만든다. -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>



	<!-- 이미지, 사운드, 동영상, 자바스크립트, css 등의 모든 정적리소스들은 루트아래 resource라는 경로를 지나가도록 
		설정. 대상: 루트아래 모든것 -->
	<!-- 리소스 폴더는 다이렉트로 접근할 수 있는 URL로 접근할 수 있게 해줍니다. / / 사이에 폴더명지정. 이미지,CSS 파일등 
		Get으로 접근하여 사용하고 싶은 파일들을 리소스 폴더로 설정하여 사용하게 됩니다. 출처: https://gocoder.tistory.com/1105 
		[고코더 IT Express] -->

	<resources location="/resources/" mapping="/**" />


	<!-- properties 관련 설정 -->

	<!-- properties 파일의 내용을 사용할수 있도록 Bean을 정의한다. @PropertySource와 같음 -->
	<beans:bean
		class='org.springframework.beans.factory.config.PropertyPlaceholderConfigurer'>
		<beans:property name="location">
			<beans:value>/WEB-INF/properties/option.properties</beans:value>
		</beans:property>
	</beans:bean>

	<!-- 드라이버 설정 : properties 파일의 value들을 끌어와서 드라이버설정값으로 사용 -->
	<beans:bean class='org.apache.commons.dbcp2.BasicDataSource'
		id='basic_data_source'>
		<beans:property name="driverClassName"
			value="${db.classname}" />
		<beans:property name="url" value="${db.url}" />
		<beans:property name='username' value="${db.username}" />
		<beans:property name="password" value="${db.password}" />
	</beans:bean>

	<!-- 쿼리문 관리(밑에서부터 읽어올라오자) : mapper의 모든 xml을 읽을것이고, mapper들의 쿼리문들을 가져와서, 
		datasource를 이용해서 세션접속하겠다 -->
	<beans:bean class='org.mybatis.spring.SqlSessionFactoryBean'
		id='sqlSession'>
		<beans:property name="dataSource"
			ref='basic_data_source' />
		<beans:property name="mapperLocations"
			value='/WEB-INF/mapper/*.xml' />
	</beans:bean>

	<!-- 쿼리문 동작: mapper처리 된것을, 생성자를 통해서 쿼리문붙은 세션템플릿객체를 만들어서 동작시키겠다(Access까지 
		다해줌) -->
	<beans:bean class='org.mybatis.spring.SqlSessionTemplate'
		id='sqlSessionTemplate'>
		<beans:constructor-arg index='0'
			ref='sqlSession' />
	</beans:bean>


	<!-- error_message.properties를 위한 설정 : 등록하고 접근자까지설정. 대신에 충돌막는 설정은 필요없다. -->

	<!-- MessageSource를 등록한다 -->
	<!-- 자료형 : Reloadable~, 메서드이름 : messageSource -->
	<beans:bean
		class='org.springframework.context.support.ReloadableResourceBundleMessageSource' id='messageSource'>
		<beans:property name="basenames">
			<beans:list>
				<beans:value>/WEB-INF/properties/error_message</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Message 접근을 위한 접근자 등록 -->
	<beans:bean class='org.springframework.context.support.MessageSourceAccessor'>
		<beans:constructor-arg ref='messageSource' />
	</beans:bean>

   
   
   <!-- 멀티파트파일을 읽어오기 위한 설정 -->
  <beans:bean class='org.springframework.web.multipart.support.StandardServletMultipartResolver' id='multipartResolver'/>
  




</beans:beans>
	
	
 
